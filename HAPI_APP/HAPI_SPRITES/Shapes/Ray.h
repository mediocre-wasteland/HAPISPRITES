////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Ray.h
//
// summary:	Declares the ray class
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

namespace HAPISPACE {

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// A ray has origin and direction to infinity. TODO: not fully implemented. HS uses a LineF
	/// instead.
	/// </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Ray
	{
	public:
		VectorF origin;
		VectorF direction;

		/// <summary>	Default leaves values undefined. </summary>
		Ray()  noexcept = default;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Construct with values. Note: dir must be normalized. </summary>
		///
		/// <param name="ori">	The origin. </param>
		/// <param name="dir">	The direction. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Ray(const VectorF& ori, const VectorF& dir)  noexcept : origin(ori), direction(dir) {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Construct from a line. </summary>
		///
		/// <param name="line">	The line. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Ray(const LineI& line) noexcept : origin(line.p1), direction(line.Direction()) {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Assumes direction is correctly normalized. </summary>
		///
		/// <param name="distance">	The distance. </param>
		///
		/// <returns>	The vector along ray. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		VectorF GetVectorAlongRay(float distance) const {
			return origin + direction * distance;
		}

		// Determines if this ray intersects the circle
		// If dist is provided the distance along the ray is returned (call GetVectorAlongRay to get actual point)
		// TODO:
		//bool Intersects(const Circle& circle, float *dist = nullptr) const;
	};
}