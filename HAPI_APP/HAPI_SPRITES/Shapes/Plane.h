////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Plane.h
//
// summary:	Declares the plane class
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

namespace HAPISPACE {

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// very simple plane class - will be expanded later A plane can be represented by a normal and
	/// an offset.
	/// </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Plane
	{
	public:
		/// <summary>	The normal. </summary>
		VectorF normal;
		/// <summary>	The offset. </summary>
		float offset;

		/// <summary>	Default constructor. </summary>
		Plane() noexcept = default;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="norm">	The normalise. </param>
		/// <param name="off"> 	The off. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Plane(const VectorF& norm, float off) noexcept : normal(norm), offset(off) {}
	};

}
