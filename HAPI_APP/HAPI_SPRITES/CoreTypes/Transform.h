////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	Transform.h
//
// summary:	Declares the transform class
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

namespace HAPISPACE {

	/// <summary>	Transform information. </summary>
	struct Transform
	{
		/// <summary>	The position. </summary>
		VectorF position{ 0 };
		/// <summary>	The scale. </summary>
		VectorF scale{ 1 };
		/// <summary>	The origin. </summary>
		VectorF origin{ 0, 0 };
		/// <summary>	The rotation. </summary>
		float rotation{ 0 };

		/// <summary>	Default constructor. </summary>
		Transform() noexcept {};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="pos">	The position. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Transform(VectorF pos) noexcept : position(std::move(pos)){}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Query if this object is rotated. </summary>
		///
		/// <returns>	True if rotated, false if not. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsRotated() const { return rotation != 0; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Query if this object is scaled. </summary>
		///
		/// <returns>	True if scaled, false if not. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool IsScaled() const { return (scale.x != 1.0f || scale.y != 1.0f); }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Translates the given transaction. </summary>
		///
		/// <param name="trans">	The transform. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Translate(const VectorF &trans) { position += trans; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Rotates. </summary>
		///
		/// <param name="radians">	The radians. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		void Rotate(float radians) { rotation += radians; }
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Equality operator. </summary>
	///
	/// <param name="lhs">	The first instance to compare. </param>
	/// <param name="rhs">	The second instance to compare. </param>
	///
	/// <returns>	True if the parameters are considered equivalent. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	inline bool operator==(const Transform& lhs, const Transform& rhs)
	{
		return (lhs.position == rhs.position && lhs.scale == rhs.scale && lhs.rotation == rhs.rotation && lhs.origin == rhs.origin);
	}
}