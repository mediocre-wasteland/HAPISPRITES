////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	IComponent.h
//
// summary:	Declares the IComponent interface
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

namespace HAPISPACE {

	/// <summary>	Currently available coponents. </summary>
	enum class EComponentType
	{
		eTransform = 0,
		eCollider,
		eNumTypes
	};

	/// <summary>	A sprite. </summary>
	class Sprite;

	/// <summary>	Base component class. </summary>
	class IComponent
	{
	private:
		/// <summary>	The owner. </summary>
		Sprite &m_owner;
	protected:

	public:
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Constructor. </summary>
		///
		/// <param name="owner">	[in,out] The owner. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		IComponent(Sprite &owner) noexcept : m_owner(owner) {}
		/// <summary>	Destructor. </summary>
		virtual ~IComponent() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Every component has an owner. </summary>
		///
		/// <returns>	The owner. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Sprite& GetOwner() const { return m_owner; }

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Virtuals. </summary>
		///
		/// <returns>	The type. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		virtual EComponentType GetType() const = 0;
	};
}
