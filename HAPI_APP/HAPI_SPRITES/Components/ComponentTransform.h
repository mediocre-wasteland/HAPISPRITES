////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	ComponentTransform.h
//
// summary:	Declares the component transform class
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

#include "IComponent.h"
#include "CoreTypes\Transform.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// namespace: HAPISPACE
//
// summary:	.
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace HAPISPACE {

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A transfor component used by Sprite. </summary>
	///
	/// <seealso cref="T:IComponent"/>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class ComponentTransform :
		public IComponent
	{
		private:
			Transform m_transform;
			VectorF m_lastPosition;
		public:
			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Constructor. </summary>
			///
			/// <param name="owner">	[in,out] The owner. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			ComponentTransform(Sprite &owner) noexcept : IComponent(owner) {}

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the component type. </summary>
			///
			/// <returns>	The type. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			EComponentType GetType() const override final { return EComponentType::eTransform; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>
			/// Allows reading of transform values but not writing. To change values call one of the set fns.
			/// </summary>
			///
			/// <returns>	The transform. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const Transform& GetTransform() const { return m_transform; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the complete transform. </summary>
			///
			/// <param name="newTrans">	The new transaction. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void SetTransform(Transform newTrans) { m_transform = newTrans; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the rotation. </summary>
			///
			/// <param name="radians">	The radians. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void SetRotation(float radians) { m_transform.rotation = radians; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets new position and remembers old. </summary>
			///
			/// <param name="pos">	The position. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void SetPosition(VectorF pos) { m_lastPosition = m_transform.position; m_transform.position = (VectorF)pos; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets scaling. </summary>
			///
			/// <param name="scale">	The scale. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void SetScaling(const VectorF &scale) { m_transform.scale = scale; }

			/// <summary>	Set origin to current frame origin. Called automatically when Sprite frame changes. </summary>
			void SetOriginToFrameOrigin();

			/// <summary>	Set origin to centre of current frame rectangle. Overrides frame origin. </summary>
			void SetOriginToCentreOfFrame();

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Sets the origin used for positioning and rotation. </summary>
			///
			/// <param name="newOrigin">	The new origin. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void SetOrigin(const VectorF& newOrigin) { m_transform.origin = newOrigin; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Translates by trans. </summary>
			///
			/// <param name="trans">	The amount. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Translate(const VectorF &trans) { m_lastPosition = m_transform.position; m_transform.Translate(trans); }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Rotates. </summary>
			///
			/// <param name="radians">	The radians. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			void Rotate(float radians) { m_transform.Rotate(radians); }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the rotation in radian. </summary>
			///
			/// <returns>	The rotation. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			float GetRotation() const { return m_transform.rotation; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the scale. </summary>
			///
			/// <returns>	The scale. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const VectorF& GetScale() const { return m_transform.scale; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the position. </summary>
			///
			/// <returns>	The position. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const VectorF& GetPosition() const { return m_transform.position; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Gets the origin. </summary>
			///
			/// <returns>	The origin. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			const VectorF& GetOrigin() const { return m_transform.origin; }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Query if this object is rotated. </summary>
			///
			/// <returns>	True if rotated, false if not. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			bool IsRotated() const { return m_transform.IsRotated(); }

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Query if this object is scaled. </summary>
			///
			/// <returns>	True if scaled, false if not. </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			bool IsScaled() const { return m_transform.IsScaled();}

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary>	Can be used to determine collision points etc. </summary>
			///
			/// <returns>	The line from last position to this (ray). </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////
			LineF GetLineFromLastPosition() const { return LineF(m_lastPosition, GetPosition()); }
	};
}
